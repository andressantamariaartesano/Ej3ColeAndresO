/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import controlador.Banco;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Andrés
 */
public class GerenteAperturaCuentas extends javax.swing.JPanel {

    Banco banco;

    /**
     * Creates new form GerenteAperturaCuentas
     */
    public GerenteAperturaCuentas(Banco banco) {
        this.banco = banco;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        txtNumeroCuenta = new javax.swing.JTextField();
        txtDNI = new javax.swing.JTextField();
        txtSaldo = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(850, 480));

        jLabel1.setText("Numero de cuenta");

        jLabel2.setText("DNI");

        jLabel3.setText("Saldo");

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtDNI)
                    .addComponent(btnAceptar)
                    .addComponent(txtSaldo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(txtNumeroCuenta))
                .addGap(240, 240, 240))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNumeroCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(btnCancelar))
                .addGap(76, 76, 76))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limpiarTexto();
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * Limpia el texto de todos los campos.
     */
    private void limpiarTexto() {
        txtDNI.setText("");
        txtNumeroCuenta.setText("");
        txtSaldo.setText("");
    }

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        abrirCuenta();
    }//GEN-LAST:event_btnAceptarActionPerformed

    /**
     * Abre una cuenta si todos los datos son correctos.
     */
    private void abrirCuenta() {
        String numeroCuenta = txtNumeroCuenta.getText();
        String dni = txtDNI.getText();
        String saldo = txtSaldo.getText();

        if (contenidoComprobado(numeroCuenta, dni, saldo)) {
            banco.guardarCuenta(numeroCuenta, dni, Double.parseDouble(saldo));
            ventanaInformacion("Cuenta agregada", "Informacion");
            limpiarTexto();
        }
    }

    /**
     * Comprueba si el contenido es correcto.
     *
     * @param numeroCuenta Numero de cuenta
     * @param dni DNI
     * @param saldo Saldo de esa cuenta
     * @return True si el contenido es correcto, False si el contendio no es
     * correcto.
     */
    private boolean contenidoComprobado(String numeroCuenta, String dni, String saldo) {
        boolean valido;

        if (camposVacios(numeroCuenta, dni, saldo)) {
            valido = false;
        } else if (!camposValidos(numeroCuenta, dni, saldo)) {
            valido = false;
        } else {
            valido = true;
        }

        return valido;
    }

    /**
     * Comprueba si todos los campos tienen texto en ellos.
     *
     * @param dni DNI
     * @param nombre Nombre
     * @param direccion Direccion
     * @param email Email
     * @return True si tienen texto en ellos, False si no tienen texto en ellos.
     */
    private boolean camposVacios(String numeroCuenta, String dni, String saldo) {
        boolean vacio;

        if (numeroCuenta.isEmpty()) {
            ventanaAdvertencia("Completa el campo Numero de cuenta", "Error");
            vacio = true;
        } else if (dni.isEmpty()) {
            ventanaAdvertencia("Completa el campo DNI", "Error");
            vacio = true;
        } else if (saldo.isEmpty()) {
            ventanaAdvertencia("Completa el campo Saldo", "Error");
            vacio = true;
        } else {
            vacio = false;
        }

        return vacio;
    }

    /**
     * Comprueba si el contenido de los campos es correcto.
     *
     * @param numeroCuenta Numero de cuenta
     * @param dni DNI
     * @param saldo Saldo
     * @return True si el contenido de los campos son válidos, False si el
     * contenido no es válido.
     */
    private boolean camposValidos(String numeroCuenta, String dni, String saldo) {
        boolean valido;

        if (banco.cuentaExistente(numeroCuenta)) {
            valido = false;
            ventanaAdvertencia("Cuenta existente", "Error");
        } else if (!banco.dniValido(dni)) {
            valido = false;
            ventanaAdvertencia("DNI no válido", "Error");
        } else if (!banco.titularExiste(dni)) {
            valido = false;
            ventanaAdvertencia("Ningun titular tiene ese DNI", "Error");
        } else if (!saldoValido(saldo)) {
            valido = false;
            ventanaAdvertencia("Saldo no válido", "Error");
        } else {
            valido = true;
        }

        return valido;
    }

    /**
     * Verifica que el saldo es válido.
     *
     * @param saldo Saldo
     * @return True si el saldo
     */
    private boolean saldoValido(String saldo) {
        boolean valido;
        double saldoNumerico;

        try {
            saldoNumerico = Double.parseDouble(saldo);
            valido = saldoNumerico > 0;
        } catch (NumberFormatException ex) {
            valido = false;
        }

        return valido;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtNumeroCuenta;
    private javax.swing.JTextField txtSaldo;
    // End of variables declaration//GEN-END:variables

    /**
     * Muestra una ventana de advertencia con un determinado titulo y mensaje.
     *
     * @param mensaje Mensaje de la ventana.
     * @param titulo Titulo de la ventana.
     */
    private void ventanaAdvertencia(String mensaje, String titulo) {
        String rutaImagen = "src/images/advertencia.png";
        ImageIcon icono = new ImageIcon(rutaImagen);
        JOptionPane.showMessageDialog(this, mensaje, titulo, JOptionPane.WARNING_MESSAGE, icono);
    }
    
    /**
     * Muestra una ventana de informacion con un determinado titulo y mensaje.
     *
     * @param mensaje Mensaje de la ventana.
     * @param titulo Titulo de la ventana.
     */
    public void ventanaInformacion(String mensaje, String titulo) {
        String rutaImagen = "src/images/informacion.png";
        ImageIcon icono = new ImageIcon(rutaImagen);
        JOptionPane.showMessageDialog(this, mensaje, titulo, JOptionPane.WARNING_MESSAGE, icono);
    }

}
